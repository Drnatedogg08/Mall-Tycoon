<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<title>Mall Mogul Tycoon - Ultimate Edition</title>
<script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-database-compat.js"></script>
<style>
  body {
    font-family: Arial, sans-serif;
    padding: 30px;
    text-align: center;
    background: linear-gradient(to right, #ffecd2, #fcb69f);
    overflow-x: hidden;
    position: relative;
    user-select: none;
  }
  h1 {
    font-size: 2.5em;
    margin-bottom: 5px;
  }
  #money {
    font-size: 1.7em;
    margin-bottom: 10px;
    position: relative;
    font-weight: bold;
    user-select: text;
  }
  #levelContainer {
    margin: 10px auto 30px auto;
    width: 320px;
    background: #eee;
    border-radius: 15px;
    overflow: hidden;
    box-shadow: inset 0 0 5px #aaa;
    height: 24px;
  }
  #levelBar {
    height: 100%;
    background: linear-gradient(90deg, #f39c12, #f1c40f);
    width: 0%;
    transition: width 1s ease-out;
  }
  #levelText {
    font-weight: bold;
    margin-bottom: 25px;
    user-select: text;
  }
  .float-money {
    position: absolute;
    color: #27ae60;
    font-weight: bold;
    animation: riseFade 1s ease-out forwards;
    pointer-events: none;
    user-select: none;
    font-size: 1.2em;
  }
  @keyframes riseFade {
    0% { opacity: 1; top: 0; }
    100% { opacity: 0; top: -30px; }
  }
  .store {
    border: 2px solid #333;
    padding: 15px;
    margin: 10px;
    border-radius: 10px;
    display: inline-block;
    width: 220px;
    background: #fff;
    position: relative;
    user-select: none;
    cursor: pointer;
    perspective: 900px;
    transform-style: preserve-3d;
    transition: transform 0.5s ease;
  }
  .store:hover:not(.locked) {
    transform: rotateY(15deg) translateY(-8px);
    box-shadow: 0 8px 20px rgba(0,0,0,0.3);
  }
  .store.locked {
    filter: grayscale(70%);
    cursor: not-allowed;
  }
  .store > div {
    position: relative;
    backface-visibility: hidden;
  }
  /* Faces */
  .face-front {
    width: 220px;
    height: 180px;
    border-radius: 12px;
    box-sizing: border-box;
    padding: 20px;
    background: #222;
    color: white;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    box-shadow: inset 0 0 40px rgba(255,255,255,0.15);
  }
  .face-side {
    position: absolute;
    width: 30px;
    height: 180px;
    border-radius: 0 12px 12px 0;
    right: -30px;
    top: 0;
    box-shadow: inset 0 0 30px rgba(0,0,0,0.6);
    transform: rotateY(90deg);
    transform-origin: left;
    background: #111;
  }

  /* Coffee store */
  .coffee .face-front {
    background: #6f4e37;
    position: relative;
  }
  .coffee .face-side {
    background: #543a28;
  }
  .steam-container {
    position: absolute;
    top: 10px;
    left: 15px;
    width: 30px;
    height: 60px;
    pointer-events: none;
    user-select: none;
    overflow: visible;
  }
  .steam-line {
    position: absolute;
    bottom: 0;
    width: 4px;
    height: 30px;
    border-radius: 50% 50% 50% 50% / 100% 100% 0 0;
    background: rgba(255, 255, 255, 0.7);
    filter: blur(2px);
    animation: steamRise 3s ease-in-out infinite;
    opacity: 0;
  }
  .steam-line:nth-child(1) {
    left: 0;
    animation-delay: 0s;
    opacity: 1;
    height: 28px;
  }
  .steam-line:nth-child(2) {
    left: 10px;
    animation-delay: 1s;
    opacity: 1;
    height: 35px;
  }
  .steam-line:nth-child(3) {
    left: 20px;
    animation-delay: 2s;
    opacity: 1;
    height: 25px;
  }
  @keyframes steamRise {
    0% {
      transform: translateY(10px) scaleX(0.6);
      opacity: 0.6;
    }
    50% {
      opacity: 0.3;
    }
    100% {
      transform: translateY(-40px) scaleX(1);
      opacity: 0;
    }
  }

  /* Shoe store */
  .shoes .face-front {
    background: #3a6073;
    position: relative;
  }
  .shoes .face-side {
    background: #2b4552;
  }

  /* Arcade */
  .arcade .face-front {
    background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
    position: relative;
    overflow: visible;
  }
  .arcade .face-side {
    background: linear-gradient(135deg, #5010a5 0%, #1a52c1 100%);
  }
  .arcade-glow {
    position: absolute;
    top: 5px;
    left: 10px;
    right: 10px;
    height: 10px;
    border-radius: 5px;
    box-shadow:
      0 0 8px #ff00ff,
      0 0 20px #ff00ff,
      0 0 30px #ff00ff;
    animation: neonBlink 2s infinite alternate;
    pointer-events: none;
    user-select: none;
  }
  @keyframes neonBlink {
    0% { opacity: 0.6; }
    100% { opacity: 1; }
  }

  /* Luxury boutique */
  .luxury .face-front {
    background: #1c1c1c;
    border: 2px solid gold;
    position: relative;
    overflow: visible;
  }
  .luxury .face-side {
    background: #111111;
    border-right: 2px solid gold;
  }
  .sparkle {
    position: absolute;
    width: 8px;
    height: 8px;
    background: radial-gradient(circle, #fff 60%, transparent 70%);
    box-shadow: 0 0 6px 2px gold;
    border-radius: 50%;
    animation: sparkleAnim 2.5s infinite alternate;
    pointer-events: none;
    user-select: none;
    opacity: 0.8;
  }
  @keyframes sparkleAnim {
    0% { opacity: 0.2; transform: scale(0.8); }
    100% { opacity: 1; transform: scale(1.2); }
  }
  .sparkle1 { top: 20px; left: 30px; animation-delay: 0s; }
  .sparkle2 { top: 60px; left: 180px; animation-delay: 1s; }
  .sparkle3 { top: 140px; left: 110px; animation-delay: 1.5s; }
  .sparkle4 { top: 100px; left: 60px; animation-delay: 2s; }

  /* Electronics */
  .electronics .face-front {
    background: #283e51;
    color: #aad8d3;
    position: relative;
  }
  .electronics .face-side {
    background: #1e2b36;
  }

  /* Food court */
  .foodcourt .face-front {
    background: #c46a4a;
    position: relative;
  }
  .foodcourt .face-side {
    background: #7a3f2b;
  }

  /* Cinema */
  .cinema .face-front {
    background: linear-gradient(135deg, #434343 0%, black 100%);
    position: relative;
    color: #eee;
  }
  .cinema .face-side {
    background: #222;
  }

  /* Theme park (NO rotation) */
  .themepark .face-front {
    background: #2e8b57;
    color: #cdeacd;
    position: relative;
  }
  .themepark .face-side {
    background: #236244;
  }
  .themepark {
    cursor: default;
  }
  .themepark:hover {
    transform: none !important;
  }

  .store h3 {
    margin: 0 0 8px 0;
    user-select: text;
  }
  .store p {
    margin: 0 0 10px 0;
    font-weight: bold;
    user-select: text;
  }
  button {
    padding: 10px 16px;
    font-size: 1em;
    margin-top: 10px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    background-color: #f1c40f;
    color: #222;
    font-weight: bold;
    transition: background-color 0.3s ease, transform 0.2s ease;
    user-select: none;
  }
  button:hover:not(:disabled) {
    background-color: #f39c12;
  }
  button:active:not(:disabled) {
    transform: scale(0.95);
  }
  button:disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }

  /* Shopper animation */
  .shopper {
    position: absolute;
    width: 30px;
    height: 30px;
    background: #333;
    border-radius: 50%;
    bottom: 10px;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    z-index: 5;
    user-select: none;
  }
  @keyframes walk {
    0% { left: -50px; }
    100% { left: 100vw; }
  }
  .shopper::before {
    content: "";
    display: block;
    width: 10px;
    height: 10px;
    background-color: gold;
    border-radius: 2px;
    position: absolute;
    top: 50%;
    left: 100%;
    transform: translateY(-50%);
  }

  /* Offline popup */
  #offlinePopup {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: #27ae60;
    color: white;
    padding: 15px 25px;
    font-weight: bold;
    border-radius: 8px;
    box-shadow: 0 0 20px #27ae60;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.5s ease;
    user-select: none;
    z-index: 1000;
  }
  #offlinePopup.show {
    opacity: 1;
    pointer-events: auto;
  }

  /* Audio toggle button */
  #audioToggle {
    position: fixed;
    top: 20px;
    right: 20px;
    background: #f1c40f;
    border: none;
    padding: 12px 18px;
    font-weight: bold;
    border-radius: 10px;
    cursor: pointer;
    user-select: none;
    box-shadow: 0 3px 8px rgba(0,0,0,0.2);
  }
  #audioToggle.active {
    background: #27ae60;
    color: white;
  }
</style>
</head>
<body>

<h1>üè¨ Mall Mogul Tycoon - Ultimate Edition</h1>

<div id="levelText">Level 1</div>
<div id="levelContainer"><div id="levelBar"></div></div>

<div id="money">Money: $0</div>

<div id="mall"></div>

<div id="offlinePopup"></div>

<button id="audioToggle">Toggle Mall Sound</button>

<script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-database-compat.js"></script>
<script>
  // Firebase config (your existing config)
  const firebaseConfig = {
    apiKey: "AIzaSyCoOa7YGwhIQd1imBJRPuWhSlH1wNoFFa4",
    authDomain: "mall-tycoon-cdfc5.firebaseapp.com",
    projectId: "mall-tycoon-cdfc5",
    storageBucket: "mall-tycoon-cdfc5.firebasestorage.app",
    messagingSenderId: "627388666562",
    appId: "1:627388666562:web:737395b100cde996dda15b",
    databaseURL: "https://mall-tycoon-cdfc5-default-rtdb.firebaseio.com"
  };
  firebase.initializeApp(firebaseConfig);
  const db = firebase.database();

  // Game state variables
  let money = parseFloat(localStorage.getItem("money")) || 0;
  let level = parseInt(localStorage.getItem("level")) || 1;
  let xp = parseFloat(localStorage.getItem("xp")) || 0;
  let lastTimestamp = parseInt(localStorage.getItem("lastTimestamp")) || Date.now();

  // Stores data with upgrades
  const stores = [
    { name: "Coffee Shop", cost: 20, income: 1, class: "coffee", upgrades: 0 },
    { name: "Shoe Store", cost: 100, income: 4, class: "shoes", upgrades: 0 },
    { name: "Arcade", cost: 500, income: 15, class: "arcade", upgrades: 0 },
    { name: "Luxury Boutique", cost: 1500, income: 35, class: "luxury", upgrades: 0 },
    { name: "Electronics Store", cost: 5000, income: 75, class: "electronics", upgrades: 0 },
    { name: "Food Court", cost: 15000, income: 150, class: "foodcourt", upgrades: 0 },
    { name: "Cinema", cost: 40000, income: 300, class: "cinema", upgrades: 0 },
    { name: "Indoor Theme Park", cost: 100000, income: 600, class: "themepark", upgrades: 0 }
  ];

  // DOM Elements
  const moneyDisplay = document.getElementById("money");
  const mallDiv = document.getElementById("mall");
  const levelText = document.getElementById("levelText");
  const levelBar = document.getElementById("levelBar");
  const offlinePopup = document.getElementById("offlinePopup");
  const audioToggle = document.getElementById("audioToggle");

  // Sounds
  const incomeSound = new Audio("https://freesound.org/data/previews/341/341695_6248127-lq.mp3"); // chime sound
  const buySound = new Audio("https://freesound.org/data/previews/256/256113_3263906-lq.mp3"); // click sound
  const ambientAudio = new Audio("https://cdn.pixabay.com/download/audio/2022/03/27/audio_f94e2475ab.mp3?filename=mall-ambient-sound-4316.mp3");
  ambientAudio.loop = true;
  ambientAudio.volume = 0.2;
  let audioPlaying = false;

  audioToggle.onclick = () => {
    if (audioPlaying) {
      ambientAudio.pause();
      audioPlaying = false;
      audioToggle.classList.remove("active");
      audioToggle.textContent = "Play Mall Sound";
    } else {
      ambientAudio.play();
      audioPlaying = true;
      audioToggle.classList.add("active");
      audioToggle.textContent = "Pause Mall Sound";
    }
  };

  // Experience and leveling
  function getXPNeeded(level) {
    return 100 * Math.pow(1.5, level - 1);
  }

  function gainXP(amount) {
    xp += amount;
    while (xp >= getXPNeeded(level)) {
      xp -= getXPNeeded(level);
      level++;
      showLevelUp();
      saveGame();
    }
    updateLevelUI();
  }

  function updateLevelUI() {
    levelText.textContent = `Level ${level}`;
    const progressPercent = (xp / getXPNeeded(level)) * 100;
    levelBar.style.width = progressPercent + "%";
  }

  function showLevelUp() {
    const lvlUp = document.createElement("div");
    lvlUp.textContent = `üéâ Level Up! You reached Level ${level}! üéâ`;
    lvlUp.style.position = "fixed";
    lvlUp.style.top = "50%";
    lvlUp.style.left = "50%";
    lvlUp.style.transform = "translate(-50%, -50%)";
    lvlUp.style.background = "#27ae60";
    lvlUp.style.color = "#fff";
    lvlUp.style.padding = "20px 40px";
    lvlUp.style.fontSize = "2em";
    lvlUp.style.borderRadius = "15px";
    lvlUp.style.zIndex = "2000";
    lvlUp.style.boxShadow = "0 0 30px #27ae60";
    lvlUp.style.userSelect = "none";
    document.body.appendChild(lvlUp);
    setTimeout(() => lvlUp.remove(), 3000);
  }

  // Render stores with upgrades and buttons
  function renderStores() {
    mallDiv.innerHTML = "";
    stores.forEach((store, index) => {
      const storeDiv = document.createElement("div");
      storeDiv.className = `store ${store.class}`;
      if(store.class === "themepark") storeDiv.style.cursor = "default";

      // 3D faces markup
      storeDiv.innerHTML = `
        <div class="face-front">
          <h3>${store.name}</h3>
          <p>Income: $${(store.income * Math.pow(2, store.upgrades)).toFixed(1)}</p>
          <p>Upgrades: ${store.upgrades}</p>
          <button ${money < store.cost ? "disabled" : ""} onclick="buyStore(${index})">Buy for $${store.cost}</button>
          <button ${money < getUpgradeCost(store) ? "disabled" : ""} onclick="upgradeStore(${index})">Upgrade for $${getUpgradeCost(store)}</button>
        </div>
        <div class="face-side"></div>
      `;

      // Add coffee steam animation lines if coffee store
      if (store.class === "coffee") {
        const steamContainer = document.createElement("div");
        steamContainer.className = "steam-container";
        for (let i=1; i<=3; i++) {
          const steamLine = document.createElement("div");
          steamLine.className = `steam-line`;
          steamContainer.appendChild(steamLine);
        }
        storeDiv.querySelector(".face-front").appendChild(steamContainer);
      }
      // Arcade neon glow
      if (store.class === "arcade") {
        const glow = document.createElement("div");
        glow.className = "arcade-glow";
        storeDiv.querySelector(".face-front").appendChild(glow);
      }
      // Luxury sparkles
      if (store.class === "luxury") {
        for(let i=1; i<=4; i++) {
          const sparkle = document.createElement("div");
          sparkle.className = `sparkle sparkle${i}`;
          storeDiv.querySelector(".face-front").appendChild(sparkle);
        }
      }

      mallDiv.appendChild(storeDiv);
    });
  }

  // Store buy
  function buyStore(index) {
    const store = stores[index];
    if (money >= store.cost) {
      money -= store.cost;
      buySound.play();
      // Increase store cost for next purchase (double)
      store.cost = Math.floor(store.cost * 2);
      // Increase income by 1.5x
      store.income *= 1.5;
      updateUI();
      saveGame();
      saveToLeaderboard();
      showFloatingText(`-$${store.cost}`, false);
    }
  }

  // Get upgrade cost (exponential scaling)
  function getUpgradeCost(store) {
    return Math.floor(50 * Math.pow(2, store.upgrades));
  }

  // Upgrade store
  function upgradeStore(index) {
    const store = stores[index];
    const cost = getUpgradeCost(store);
    if (money >= cost) {
      money -= cost;
      buySound.play();
      store.upgrades++;
      updateUI();
      saveGame();
      saveToLeaderboard();
      showFloatingText(`-$${cost}`, false);
    }
  }

  // Show floating text for income or expense
  function showFloatingText(text, positive = true) {
    const float = document.createElement("div");
    float.className = "float-money";
    float.textContent = (positive ? "+" : "") + text;
    float.style.left = "50%";
    float.style.color = positive ? "#27ae60" : "#e74c3c";
    moneyDisplay.appendChild(float);
    setTimeout(() => float.remove(), 1200);
  }

  // Animate money count for smooth increase
  let displayedMoney = money;
  function animateMoneyDisplay() {
    if (displayedMoney !== money) {
      let diff = money - displayedMoney;
      displayedMoney += diff * 0.1;
      if (Math.abs(diff) < 1) displayedMoney = money;
      moneyDisplay.textContent = `Money: $${Math.floor(displayedMoney)}`;
    }
    requestAnimationFrame(animateMoneyDisplay);
  }

  // Save game to localStorage
  function saveGame() {
    localStorage.setItem("money", money);
    localStorage.setItem("level", level);
    localStorage.setItem("xp", xp);
    localStorage.setItem("lastTimestamp", Date.now());
    localStorage.setItem("stores", JSON.stringify(stores));
  }

  // Load game from localStorage
  function loadGame() {
    const savedStores = localStorage.getItem("stores");
    if (savedStores) {
      const parsed = JSON.parse(savedStores);
      parsed.forEach((storeSaved, i) => {
        if(stores[i]) {
          stores[i].cost = storeSaved.cost;
          stores[i].income = storeSaved.income;
          stores[i].upgrades = storeSaved.upgrades;
        }
      });
    }
  }

  // Save to leaderboard firebase
  function saveToLeaderboard() {
    // For demo, username is "Player"
    db.ref("leaderboard/Player").set({ username: "Player", money });
  }

  // Spawn shoppers
  function spawnShopper() {
    const shopper = document.createElement("div");
    shopper.className = "shopper";
    shopper.style.top = `${Math.random() * 300 + 100}px`;
    const size = Math.random() * 20 + 15;
    shopper.style.width = `${size}px`;
    shopper.style.height = `${size}px`;
    shopper.style.animationDuration = `${Math.random() * 6 + 3}s`;
    document.body.appendChild(shopper);
    setTimeout(() => shopper.remove(), 10000);
  }

  // Passive income tick every second
  function incomeTick() {
    let totalIncome = 0;
    stores.forEach(store => {
      const storeIncome = store.income * Math.pow(2, store.upgrades);
      totalIncome += storeIncome;
    });

    money += totalIncome;

    gainXP(totalIncome / 2); // XP gained is half of money earned per tick
    showFloatingText(`$${totalIncome.toFixed(1)}`);
    if(audioPlaying) incomeSound.play();

    updateUI();
    saveGame();
    saveToLeaderboard();
  }

  // Update UI
  function updateUI() {
    renderStores();
  }

  // Offline progress calculation
  function calculateOfflineProgress() {
    const now = Date.now();
    const elapsed = now - lastTimestamp;
    if (elapsed > 60000) { // only show offline earnings if away more than 60s
      const secondsAway = Math.floor(elapsed / 1000);
      let totalIncomePerSecond = 0;
      stores.forEach(store => {
        const storeIncome = store.income * Math.pow(2, store.upgrades);
        totalIncomePerSecond += storeIncome;
      });
      const offlineEarnings = totalIncomePerSecond * secondsAway;
      money += offlineEarnings;
      gainXP(offlineEarnings / 2);
      showOfflinePopup(offlineEarnings.toFixed(1));
    }
    lastTimestamp = now;
  }

  // Show offline earnings popup
  function showOfflinePopup(amount) {
    offlinePopup.textContent = `Welcome back! You earned $${amount} while away.`;
    offlinePopup.classList.add("show");
    setTimeout(() => offlinePopup.classList.remove("show"), 6000);
  }

  // Initial setup
  function init() {
    loadGame();
    calculateOfflineProgress();
    updateLevelUI();
    updateUI();
    animateMoneyDisplay();
  }

  // Run intervals
  setInterval(incomeTick, 1000);
  setInterval(spawnShopper, 2500);

  // Save game before exit
  window.addEventListener("beforeunload", saveGame);

  // Start game
  init();

  // Make buyStore & upgradeStore global so buttons can access them
  window.buyStore = buyStore;
  window.upgradeStore = upgradeStore;
</script>

</body>
</html>
